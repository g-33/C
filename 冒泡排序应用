1.使用数组和指针的形式实现冒泡排序，并优化。bubble_sort();

#include<stdio.h>
#include<stdlib.h>
int  bubble_sort(int arr[])
{
	int i = 0;
	int j = 0;
	int count = 0;
	for(j=0;j<9;j++)
		{
			for(i=0;i<9-j;i++)
			{
				if(arr[i]>arr[i+1])
				{
				int temp=arr[i];
			  arr[i]=arr[i+1];
				arr[i+1]=temp;
				count++;
				}
			}		
	           if(count==0)
			   {
					for(i=0;i<10;i++)
					{
					printf("%d ",arr[i]);
					}
					return ;
			   }	
	}
	for(i=0;i<10;i++)
	{
	printf("%d ",arr[i]);
	}
}
int main()
{
	int arr[10]={0};
	int i = 0;
	printf(" 请输入10个要排序的数：");
	for( i=0;i<10;i++)
	{
	scanf("%d",&arr[i]);
	}
	printf("\n");
	bubble_sort(arr);
	printf("\n");
	system("pause");
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
 void bubble_sort(int *arr)
{
	
	int *left = arr;
	int *p = arr;
	int i,j;
	for(j=0;j<9;j++)
		{
			left=p;
			for(i=0;i<9-j;i++)
			{
				if(*left>*(left+1))
				{
				int temp = *left;
				*left =*( left+1);
				*(left+1)=temp;
				left++;
				}
		}
	}
}
int main()
{
	int arr[10] = {9,8,7,6,5,4,3,2,1,0};
	int i = 0;
	bubble_sort(arr);
	for(i=0;i<10;i++)
	{
		printf("%d  ",*(arr+i));
	}
	printf("\n");
	system("pause");
	return 0;
}
2.调整数组使奇数全部都位于偶数前面。

题目：
输入一个整数数组，实现一个函数，来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，所有偶数位于数组的后半部分。
#include<stdio.h>
#include<stdlib.h>
void bubble_sort(int arr[])
{
	int i = 0;
	int j = 0;
	for(j=0;j<9;j++)
	{
		for(i=0;i<9-j;i++)
		{
			if((arr[i]%2==0)&&(arr[i+1]%2==1))
			{
				int temp=arr[i];
				arr[i]=arr[i+1];
				arr[i+1]=temp;

			}
		}				  
	}
}
int main()
{
	int arr[10]={0};
	int i = 0;
	printf(" enter ten numbers：");
	for( i=0;i<10;i++)
	{
		scanf("%d",&arr[i]);
	}
	printf("\n");
	bubble_sort(arr);
	for(i=0;i<10;i++)
	{
		printf("%d ",arr[i]);
	}
	printf("\n");
	system("pause");
	return 0;
}

3.
有一个二维数组.----杨氏矩阵
数组的每行从左到右是递增的，每列从上到下是递增的.
在这样的数组中查找一个数字是否存在。
时间复杂度小于O(N);

1 2 3
4 5 6
7 8 9
#include<stdio.h>
#include<stdlib.h>
int Mid(int arr[3][3],int key)
{
	int *left=&arr[0][0];
	int *right=&arr[2][2];
	int *mid = 0;
	while(left<=right)
	{
		mid=left-((left-right)/2);
		if(*mid==key)
		{
			return 1;
			break;
		}
		else
		{
			if(*mid>key)
			{
				right = mid-1;
			}
			else
				left = mid+1;
		}
	}
	return 0;
}
int main()
{
	int arr[3][3]={1,2,3,4,5,6,7,8,9};
	int key;
	int ret  = 0;
	scanf("%d",&key);
	ret=Mid(arr, key);
	if(ret==1)
		printf("exsit!\n");
	else
		printf("NO exsit\n");
	system("pause");
	return 0;
}
